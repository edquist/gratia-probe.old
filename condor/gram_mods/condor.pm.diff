*** condor.pm.orig	2006-04-12 14:33:14.000000000 -0500
--- condor.pm	2006-04-14 17:30:34.000000000 -0500
***************
*** 28,33 ****
--- 28,68 ----
      $condor_rm	 	= '/opt/condor/bin/condor_rm';
  }
  
+ sub log_to_gratia
+ {
+     my $self = shift;
+     my $log_filename = $self->{condor_logfile};
+ 
+     # Select the gratia location
+     my $env = "$ENV{VDT_LOCATION}";
+     if ( "x$env" eq "x" ) {
+       $env = "$ENV{GLOBUS_LOCATION}/..";
+     }
+     if ( "x$env" eq "x" ) {
+        $env = "/var/tmp";
+     }
+     my $log_dir = "$env/gratia/var/data/";
+     
+     if ( -d $log_dir ) {
+       # For now assume that the existence of the directory means that
+       # accounting is enabled.
+       if ( -r $log_filename ) {
+          $self->log("Logging for accounting purpose the file $log_filename into $log_dir");
+          @args = ("cp", "$log_filename" , "$log_dir" );
+          system(@args) == 0 or $self->log("Error: system @args failed: $?");
+ 	 system("echo succesfull copy >> /var/tmp/gratia.log");
+       } else {
+          if ( ! -e $log_filename ) {
+             $self->log("Logging for accounting purpose failed: $log_filename does not exist");
+          } else {
+             $self->log("Logging for accounting purpose failed: can not read the file $log_filename");
+          }
+          return 0; # should return a proper Globus failure code.
+       }
+     }
+     return 1; # Should return a proper Globus success code
+ }
+ 
  sub new
  {
      my $proto = shift;
***************
*** 514,528 ****
                  if $description->stdout() ne '';
              $self->nfssync( $description->stderr(), 0 )
                  if $description->stderr() ne '';
!             if ( ${self}->{individual_condor_log} ) {
!                 unlink($self->{condor_logfile});
!             }
              return { JOB_STATE => Globus::GRAM::JobState::DONE };
          }
  
          if($num_abort > 0)
          {
              if ( ${self}->{individual_condor_log} ) {
                  unlink($self->{condor_logfile});
              }
              $state = Globus::GRAM::JobState::FAILED;
--- 549,570 ----
                  if $description->stdout() ne '';
              $self->nfssync( $description->stderr(), 0 )
                  if $description->stderr() ne '';
!  
!             # Should we really delete a file that we have not
!             # been able to read.  This leaves room for a race 
!             # condition So the following code is commented out:
! 
!             #if ( ${self}->{individual_condor_log} ) {
!             #    $self->log_to_gratia();
!             #    unlink($self->{condor_logfile});
!             #}
              return { JOB_STATE => Globus::GRAM::JobState::DONE };
          }
  
          if($num_abort > 0)
          {
              if ( ${self}->{individual_condor_log} ) {
+                 $self->log_to_gratia();
                  unlink($self->{condor_logfile});
              }
              $state = Globus::GRAM::JobState::FAILED;
***************
*** 535,540 ****
--- 577,583 ----
                  if $description->stderr() ne '';
  
              if ( ${self}->{individual_condor_log} ) {
+                 $self->log_to_gratia();
                  unlink($self->{condor_logfile});
              }
              $state = Globus::GRAM::JobState::DONE;
