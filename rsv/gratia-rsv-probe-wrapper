eval '(exit $?0)' && eval 'exec perl -S $0 ${1+"$@"}'
  && eval 'exec perl -S $0 $argv:q'
  if 0;
########################################################################
# $Id: gratia-rsv-probe-wrapper,v 1.1 2008-12-19 20:11:02 greenc Exp $
#
# Execute gratia-rsv-probe for all found probes.
#
########################################################################

use strict;

use Getopt::Long;
use File::Basename;

use Cwd 'chdir';

use vars qw($script_top_dir);

my $prog_name = basename $0;
my %options = ();
my @excludes = ();

BEGIN {
  # Make a spirited attempt to find where our libraries, etc are.
  if (-l $0) {
    $script_top_dir = dirname(readlink($0));
  } else {
    $script_top_dir = dirname $0;
  }
}

Getopt::Long::Configure(qw(no_ignore_case bundling require_order));

GetOptions(\%options,
           "test|t",
           "exclude-probe|exclude|e=s@" => \@excludes,
           "verbose|v",
           "help|h") or usage(1);

my @cmd_options = @ARGV;

$options{help} and usage(1);

chdir($script_top_dir);

unless ($ENV{VDT_LOCATION}) {
  print STDERR "$prog_name: VDT_LOCATION is not set!\n";
  exit(1);
}
my $probedir = "$ENV{VDT_LOCATION}/gratia/probe";

unless (-d $probedir) {
  print STDERR "$prog_name: no directory $ENV{VDT_LOCATION}/gratia/probe!\n";
  exit(1);
}

unless (opendir(DIR, $probedir)) {
  print STDERR "$prog_name: unable to open directory for $ENV{VDT_LOCATION}/gratia/probe!\n";
  exit(1);
}

my @cmd = ("./gratia-rsv-probe");
if ($options{test}) {
  push @cmd, "-T";
}

if (scalar @cmd_options) {
  push @cmd, @cmd_options;
}

push @cmd, "-p" unless grep m&^-p$&, @cmd;

while (my $dir = readdir DIR) {
  next unless -d "$probedir/$dir";
  next if $dir =~ m&^\.+$&;
  next if $dir =~ m&^(?:rsv|test|common)$&;
  next if grep m&^\Q$dir\E$&, @excludes;
  if ($options{verbose}) {
    print STDERR "$prog_name: executing ", join(" ", @cmd, $dir), "\n";
  }
  system(@cmd, $dir);
}
closedir(DIR);

sub usage {
  print STDERR <<EOF;
usage: $prog_name --help|-h
       $prog_name \[--test|-t] [--verbose|-v] [--exclude-probe <exclude-probe>|--exclude <exclude-probe>|-e <exclude-probe>]+ -- [<probe-args>]

Options marked with `+' are repeatable and cumulative.
EOF
  exit shift || 1;
}

1;

__END__

### Local Variables:
### mode: cperl
### End:
