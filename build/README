Probe area packaging build instructions.
----------------------------------------

1) The script package-probe will create tarfiles for each directory
   mentioned. Example usage:

     build/package-probe 0.9c common condor psacct pbs-lsf


2) Do not build as ROOT! Create a file ~/.rpmmacros as follows:

%_topdir <my-rpmbuild-dir>

   Then, create the structure:

#!/bin/bash
cd /usr/src/redhat
cat <<EOF | cpio -pmudv ~/my-rpmbuild-dir
BUILD
`ls -1d RPMS/*`
RPM
SOURCES
SPECS
SRPMS
EOF


3) The tarfiles created in step 1 should be moved into the SOURCES area
   of your RPM build tree; the populate_SOURCES script is provided for
   this purpose. Example usage:

     build/populate_SOURCES -r ~/rpmbuild


4) Use the RPM SPEC file in build/ to create the RPMs. Note that the
   Version: tag must match the version used in the invocation of the
   package-probe command (0.9c in the example above).

   To build the full set of RPMs, you will need to invoke rpmbuild *four*
   times:

     i) rpmbuild -ba --target=noarch <spec-file>

        Build the non-architecture-specific default RPMS.

    ii) rpmbuild -ba -Dconfig_itb --target=noarch <spec-file>

        Build the non-arch-specific RPMS with ITB configurations
        (and -itb suffix in the RPM name).

   iii) rpmbuild -ba <spec-file>

        Build the arch-specific RPMS (currently only the pbs-lsf probe).

    iv) rpmbuild -ba -Dconfig_itb  <spec-file>

        Build the arch-specific RPMS with ITB configurations.

   Alternatively: use the build/build_all script with appropriate
   arguments. However, please remember to make appropriate entries in
   the specfile's Changelog section.

5) Don't forget to customize Version:, Release:, Vendor: and Packager:
   as appropriate (Version and release will be updated by the build_all
   script, if used). Please use the following convention:

   *) Only package RPMs from an already-tagged release in CVS (eg 0.9c
   above).

   *) The Version: tag in the .spec file must match the version used in
   the package-probe invocation above, and by implication, the CVS tag.

   *) The version of the software being packaged should be bumped and
   Release: reset to 1 if the contents of the tarballs have changed in
   any way; conversely, if the RPM content has changed but the tarballs
   have not (addition of a patch or changes to scriptlets or package
   descriptions), it is the Release: number that should be bumped.


------------------------------------
2006/08/30 CHG
