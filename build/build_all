#!/bin/bash
########################################################################
# build_all
#
# Do the full package and RPM build. Should be invoked from gratia/probe
# area with:
#
#   build/build_all <options> <args>
#
# See build/build_all -h for details.
#
# 2007/09/11 CHG for the Gratia project.
########################################################################

# Defaults
rpmbuild_top=~/rpmbuild
specfile=~/gratia/probe/build/gratia-probe.spec

usage() {
  cat 1>&2 <<EOF
usage: build_all -h
       build_all [-d <rpm-macro-definition>] [-r <rpmbuild-top>] \
                 [-s <specfile>] [--] <version> [<release>]

Defaults:
  rpmbuild-top=${rpmbuild_top}
  specfile=${specfile}
  release=1
EOF
  exit 1
}

while getopts :hd:r:s:p OPT; do
    case $OPT in
	d)
            if [[ -n "$defines" ]]; then
              defines="$defines --define='$OPTARG'"
            else
	      defines="--define='$OPTARG'"
            fi
            ;;
        h)
	    usage
            ;;
        p)
            prepare_only=1
            ;;
	r)
	    rpmbuild_top="$OPTARG"
	    ;;
	s)
	    specfile="$OPTARG"
	    ;;
	*)
	    usage
    esac
done
shift $[ OPTIND - 1 ]

[[ -n "${1}" ]] || usage
version=${1}
release=${2:-1}

TMP=`mktemp -d ${TMPDIR:-/tmp}/build_all.XXXXXXXXXX`
if [[ -z "$TMP" ]]; then
  echo "Unable to create temporary file using mktemp" 1>&2
  exit 1
fi

trap "[[ -d \"$TMP\" ]] && rm -rf \"$TMP\" 2>/dev/null" EXIT

tmp_specfile="${TMP}/`basename ${specfile}`"

perl -wape '
s&^(\s*Version\s*:\s*).*$&${1}'"${version}"'&i;
s&^(\s*Release\s*:\s*).*$&${1}'"${release}"'&i;
' ${specfile} > "${tmp_specfile}"

build/package-probe "${version}" common condor pbs-lsf psacct
status=$?

if (( $status == 0 )); then
  build/populate_SOURCES -r "${rpmbuild_top}"
  status=$?
else
  exit $status
fi

if (( $status == 0 )); then
  if  [[ -n "$prepare_only" ]]; then
    eval rpmbuild -bp $defines "${tmp_specfile}"
    exit $?
  else
    eval rpmbuild -ba $defines "${tmp_specfile}"
    status=$?
  fi
else
  exit $status
fi

if (( $status == 0 )); then
  eval rpmbuild -ba $defines --target=noarch "${tmp_specfile}"
  status=$?
else
  exit $status
fi

if (( $status == 0 )); then
  eval rpmbuild -ba $defines "--define='config_itb 1'" "${tmp_specfile}"
  status=$?
else
  exit $status
fi

if (( $status == 0 )); then
  eval rpmbuild -ba $defines "--define='config_itb 1'" --target=noarch "${tmp_specfile}"
  status=$?
else
  exit $status
fi
