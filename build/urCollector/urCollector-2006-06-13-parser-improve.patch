--- ../pbs-lsf-0.30c-1/urCollector.pl	2008-01-22 16:36:09.000000000 -0600
+++ ./urCollector.pl	2008-01-22 17:12:15.000000000 -0600
@@ -13,7 +13,6 @@
   push @INC, $::ENV{URCOLLECTOR_LOCATION} || "/opt/urCollector";
 };
 
-use Text::ParseWords;
 use Time::Local;
 use File::Basename;
 use urCollector::Common qw(:DEFAULT :Locking);
@@ -337,9 +336,9 @@
 
     opendir(DIR, $lrmsLogDir) || &error("Error: can't open dir $lrmsLogDir: $!");
     while( defined(my $file = readdir(DIR)) ) {
-	next if ( $file =~ /^\.\.?$/ ); # skip '.' and '..' 
-	next if ( $lrmsType eq "pbs" && !($file =~ /^\d{8}(\.gz)?$/) );
-	next if ( $lrmsType eq "lsf" && !($file =~ /^lsb\.acct(\.\d*)?(\.gz)?$/) );
+	next if ( $file =~ /^\.\.?$/o ); # skip '.' and '..' 
+	next if ( $lrmsType eq "pbs" && !($file =~ /^\d{8}(\.gz)?$/o) );
+	next if ( $lrmsType eq "lsf" && !($file =~ /^lsb\.acct(\.\d*)?(\.gz)?$/o) );
 	# we accept compressed files as well (but will be able to parse them
 	# only if we have the command less, see later)
 
@@ -406,11 +405,10 @@
     # building command to open the log file
     my $cmd = $tac_cmd;
     # decide whether to decompress using 'less':
-    if ($filename =~ /(\.gz)?$/) {
+  if ($filename =~ /(\.gz)?$/o) {
 	# decompress and pipe into tac:
 	$cmd = "$less_cmd $lrmsLogDir/$filename | ".$cmd;
-    }
-    else {
+  } else {
 	# just use tac:
 	$cmd = $cmd." $lrmsLogDir/$filename";
     }
@@ -452,9 +450,12 @@
 	# for debugging:
 	#print "Scanning line: $line\n";
 
+    # Populate job fields array
+    my $lrmsRecordFields = populate_lrmsRecordFields($lrmsType, $line);
+
 	# returns an LRMS job ID only if the line contains a finished
 	# job
-	my $targetJobId = &getLrmsTargetJobId($lrmsType, $line);
+    my $targetJobId = &getLrmsTargetJobId($lrmsType, $lrmsRecordFields);
 
 	next if ($targetJobId eq "");
 
@@ -463,7 +464,7 @@
 	# the LRMS creation time (=submission time)!
 	my $lrmsEventTimeString = "";
 	my $lrmsEventTimestamp =
-	    &getLrmsEventTime($lrmsType, $line, $lrmsEventTimeString);
+	    &getLrmsEventTime($lrmsType, $lrmsRecordFields, $lrmsEventTimeString);
 
 	if($lrmsEventTimestamp == 0) {
 	    print "Error: could not determine LRMS event timestamp! Wrong file format ... ignoring this log file!\n";
@@ -472,7 +473,7 @@
 	}
 
 	# get creation time stamp for LRMS job (for matching CE log timestamp)
-	my $job_ctime = &getLrmsJobCTime($lrmsType, $line);
+    my $job_ctime = &getLrmsJobCTime($lrmsType, $lrmsRecordFields);
 
 	if ($job_ctime == 0) {
 	    print "Error: could not determine LRMS job creation/submission timestamp! Wrong file format ... ignoring this log file!\n";
@@ -493,8 +494,7 @@
 
 	    close LRMSLOGFILE;
 	    return 0;
-	}
-	else {
+    } else {
 	    # need to process the job:
 	    if ( $firstJobId && $_[1] ) {    # $_[1] = $newestF
 
@@ -513,8 +513,7 @@
 		$gianduiottoHeader =  &parseCeUserMapLog($targetJobId,
 							 $lrmsEventTimestamp,
 							 $job_ctime);
-	    }
-	    else {
+	    } else {
 		# don't use CE job map ... local job!
 		$gianduiottoHeader = "JOB_TYPE=local\n";
 	    }
@@ -529,11 +528,10 @@
 		    != 0) {
 		    print "".localtime().": Error: could not create UR file in $URBox for job $targetJobId with LRMS event time: $lrmsEventTimeString!\n";
 		}
-	    }
-	    else {
+	    } else {
 		# parse the LRMS log line and write a GGF UR file (XML):
 		if (&writeGGFURFile($targetJobId, $lrmsEventTimestamp,
-				    $gianduiottoHeader, $line)
+                            $gianduiottoHeader, $lrmsRecordFields)
 		    != 0) {
 		    print "".localtime().": Error: could not create GGF UR file (XML) in $URBox for job $targetJobId with LRMS event time: $lrmsEventTimeString!\n";
 		}
@@ -577,7 +575,7 @@
 	my $fullname = $ceJobMapLogDir.$file;
 	#print "CE_LOG_FILE:$fullname ...\n";
 
-	next if ($file =~ /^\.\.?$/); # skip '.' and '..' 
+    next if ($file =~ /^\.\.?$/o); # skip '.' and '..' 
 	next if ( !( $fullname =~ /^$ceJobMapLog[\/\-_]?\d{8}(\.gz)?$/ ) &&
 		  !( $fullname =~ /^$ceJobMapLog[\/\-_]?\d{4}-\d{2}-\d{2}(\.gz)?$/ ) &&
 		  !( $fullname =~ /^$ceJobMapLog(\.\d*)?(\.gz)?$/)
@@ -625,8 +623,7 @@
 	    $ceScanLogFiles[1] = $logFile;
 	    $scanDirection{$logFile} = "backward";
 	    last;
-	}
-	else {
+    } else {
 	    # as long as we didn't find the previous file, this might be
 	    # the expected one:
 	    $ceScanLogFiles[2] = $ceScanLogFiles[0]; # next file
@@ -662,11 +659,10 @@
 	    $cmd = $cat_cmd;
 	}
 	# decide whether to decompress using 'less':
-	if ($scanFile =~ /(\.gz)?$/) {
+    if ($scanFile =~ /(\.gz)?$/o) {
 	    # decompress and pipe into cat/tac:
 	    $cmd = "$less_cmd $ceJobMapLogDir/$scanFile | ".$cmd;
-	}
-	else {
+    } else {
 	    # just use cat/tac:
 	    $cmd = $cmd." $ceJobMapLogDir/$scanFile";
 	}
@@ -682,7 +678,7 @@
 		# "timestamp=2006-03-08 12:45:01" or
 		# "timestamp=2006/03/08 12:45:01"
 		my $ceLogTstamp = 0;
-		if ($line =~ /\s*\"timestamp=(\d{4})[-\/](\d{2})[-\/](\d{2})\s(\d{2}):(\d{2}):(\d{2})\"\s*/) {
+        if ($line =~ /\s*\"timestamp=(\d{4})[-\/](\d{2})[-\/](\d{2})\s(\d{2}):(\d{2}):(\d{2})\"\s*/o) {
 
 		    # get timestamp for this UTC time!
 		    my $ceEntryTimestamp =
@@ -711,23 +707,20 @@
 			my @fields = split(/\"/, $line);
 			my $fld;
 			foreach $fld (@fields) {
-			    next if ($fld =~ /^\s*$/); # spaces in between
-			    if ($fld =~ /^userDN=(.*)$/) {
+              next if ($fld =~ /^\s*$/o); # spaces in between
+              if ($fld =~ /^userDN=(.*)$/o) {
 				$userDN = $1;
 				print "userDN=$userDN; ";
-			    }
-			    elsif ($fld =~ /^userFQAN=(.*)$/) {
+              } elsif ($fld =~ /^userFQAN=(.*)$/o) {
 				my $fqan = $1;
-				if (! $fqan =~ /^\s*$/) {
+                if (! $fqan =~ /^\s*$/o) {
 				    push (@userFQANs, $fqan);
 				}
 				print "userFQAN=$fqan; ";
-			    }
-			    elsif ($fld =~ /^ceID=(.*)$/) {
+              } elsif ($fld =~ /^ceID=(.*)$/o) {
 				$ceID = $1;
 				print "ceID=$ceID; ";
-			    }
-			    elsif ($fld =~ /^jobID=(.*)$/) {
+              } elsif ($fld =~ /^jobID=(.*)$/o) {
 				$jobID = $1;
 				print "jobID=$jobID; ";
 				if ($jobID eq "none" || $jobID eq "NONE") {
@@ -798,24 +791,21 @@
 					$urGridInfo{$key} = $glueAttributes{$key};
 				    }
 				}
-			    }
-			    else {
+              } else {
 				print "Job too old, GLUE attributes from LDIF file cannot be assumed to be correct ... not added to UR!\n";
 			    }
 			}
 
                         $keepSearchingCeLogs = 0;
 			last;
-		    }
-		    elsif ($ceEntryTimestamp<$job_ctime-$TSTAMP_ACC) {
+          } elsif ($ceEntryTimestamp<$job_ctime-$TSTAMP_ACC) {
 			# the timestamp from the CE log is too low, stop
 			# trying to find the job!
 			print "Timestamp of CE log before LRMS creation time: no job found in CE log: local job!\n";
 			$isLocal = 1;
 			$keepSearchingCeLogs = 0;
 			last;
-		    }
-		    else {
+          } else {
 			print "Timestamp of CE log after LRMS creation time: job with recycled LRMS ID ... ignoring!\n";
 		    }
 
@@ -836,8 +826,7 @@
 
     if ($isLocal) {
 	$gHeader = "JOB_TYPE=local\n".$gHeader;
-    }
-    else {
+  } else {
 	# grid job
 	$gHeader = "JOB_TYPE=grid\n".$gHeader;
     }
@@ -883,7 +872,7 @@
     my @headerLines = split(/\n/, $header);
     my $hLine;
     foreach $hLine (@headerLines) {
-	if ($hLine =~ /^([^=]*)=(.*)$/) {
+    if ($hLine =~ /^([^=]*)=(.*)$/o) {
 	    $urGridInfo{$1}=$2;
 	}
     }
@@ -891,11 +880,9 @@
     # parse usage info from LRMS account log:
     if ($lrmsType eq "pbs") {
 	&parseUR_pbs($UR);
-    }
-    elsif ($lrmsType eq "lsf") {
+  } elsif ($lrmsType eq "lsf") {
 	&parseUR_lsf($UR);
-    }
-    else {
+  } else {
 	print "ERROR: unknown LRMS type ($lrmsType) ... skipping!\n";
 	return 2;
     }
@@ -904,8 +891,7 @@
     my $gridJobId = "";
     if (exists($urGridInfo{GRID_JOBID})) {
 	$gridJobId = $urGridInfo{GRID_JOBID};
-    }
-    elsif (exists($urAcctlogInfo{server}) && $urAcctlogInfo{server} ne ""
+  } elsif (exists($urAcctlogInfo{server}) && $urAcctlogInfo{server} ne ""
 	   && exists($urAcctlogInfo{lrmsId}) && $urAcctlogInfo{lrmsId} ne ""
 	   && exists($urAcctlogInfo{start}) && $urAcctlogInfo{start} ne "") {
 	$gridJobId = $urAcctlogInfo{server}.":".$urAcctlogInfo{lrmsId}."_".$urAcctlogInfo{start};
@@ -914,8 +900,7 @@
     if ($gridJobId eq "") {
 	print "ERROR: Canot determine or construct a unique job ID ... skipping!\n";
 	return 3;
-    }
-    else {
+  } else {
 	print "Using grid job ID '$gridJobId' also as RecordIdentity!\n";
     }
 
@@ -950,7 +935,7 @@
 	$cmd .= "-j \"$urAcctlogInfo{jobName}\" ";
     }
 
-    if (exists($urAcctlogInfo{exitStatus}) && $urAcctlogInfo{exitStatus} =~ /^\d+$/) {
+  if (exists($urAcctlogInfo{exitStatus}) && $urAcctlogInfo{exitStatus} =~ /^\d+$/o) {
 	$cmd .= "-x \"$urAcctlogInfo{exitStatus}\" -X \"exit status\" ";
     }
 
@@ -972,8 +957,7 @@
 
     if ($siteName ne "") {
 	$cmd .= "-m \"$siteName\" -M \"SiteName\" ";
-    }
-    elsif (exists($urAcctlogInfo{server}) && $urAcctlogInfo{server} ne "") {
+  } elsif (exists($urAcctlogInfo{server}) && $urAcctlogInfo{server} ne "") {
 	$cmd .= "-m \"$urAcctlogInfo{server}\" -M \"Server\" ";
     }
 
@@ -1010,7 +994,7 @@
 	$cmd .= "\"ResourceIdentity=$resGridId\" ";
     }
 
-    if (exists($urAcctlogInfo{mem}) && $urAcctlogInfo{mem} =~ /^(\d+)([^\d]*)$/) {
+  if (exists($urAcctlogInfo{mem}) && $urAcctlogInfo{mem} =~ /^(\d+)([^\d]*)$/o) {
 	my $unit = "KB";
 	if ($2 ne "") {
 	    $unit = uc($2);
@@ -1018,7 +1002,7 @@
 	$cmd .= "\"Memory=$1,,$unit,,total,\" ";
     }
 
-    if (exists($urAcctlogInfo{vmem}) && $urAcctlogInfo{vmem} =~ /^(\d+)([^\d]*)$/) {
+  if (exists($urAcctlogInfo{vmem}) && $urAcctlogInfo{vmem} =~ /^(\d+)([^\d]*)$/o) {
 	my $unit = "KB";
 	if ($2 ne "") {
 	    $unit = uc($2);
@@ -1089,8 +1073,8 @@
 	while ($line = <GLUEFILE>) {
 	    my $key;
 	    foreach $key (@keys) {
-		if ( ($line =~ /^$key:\s?(.*)$/ )
-		     || ($line =~ /^$key=(.*)$/ ) ) {
+		if ( ($line =~ /^$key:\s?(.*)$/o )
+		     || ($line =~ /^$key=(.*)$/o ) ) {
 		    # accept stuff like "GlueHostBenchmarkSI00: 955" and
 		    # "GlueHostApplicationSoftwareRunTimeEnvironment: SI00MeanPerCPU=955"
 		    $glueAttributes{$key} = $1;
@@ -1159,8 +1143,7 @@
 sub getLrmsTargetJobId {
     if ($_[0] eq "pbs") {
 	return &getLrmsTargetJobId_pbs($_[1]);
-    }
-    elsif ($_[0] eq "lsf") {
+  } elsif ($_[0] eq "lsf") {
 	return &getLrmsTargetJobId_lsf($_[1]);
     }
     return "";
@@ -1168,10 +1151,10 @@
 
 sub getLrmsTargetJobId_pbs {
     my $jid = ""; # default: line to ignore!
+  my $lrmsRecordFields = shift;
 
-    my @ARRAY = split(" " , $_[0] );
-    if (scalar(@ARRAY) > 1) {
-	my @ARRAY2 = split(";" , $ARRAY[1] );
+  if (scalar(@$lrmsRecordFields) > 1) {
+    my @ARRAY2 = split(";" , $$lrmsRecordFields[1] );
 	if (scalar(@ARRAY2) > 2 && $ARRAY2[1] eq "E" ) {
 	    $jid = $ARRAY2[2]; # finished job, return LRMS ID!
 	}
@@ -1181,10 +1164,10 @@
 
 sub getLrmsTargetJobId_lsf {
     my $jid = ""; # default: line to ignore!
+  my $lrmsRecordFields = shift;
 
-    my @ARRAY = split(" " , $_[0] );
-    if ( (scalar(@ARRAY) > 3) && ($ARRAY[0] eq "\"JOB_FINISH\"") ) {
-	$jid = $ARRAY[3]; # finished job, return LRMS ID!
+  if ( (scalar(@$lrmsRecordFields) > 3) && ($$lrmsRecordFields[0] eq "JOB_FINISH") ) {
+    $jid = $$lrmsRecordFields[3];           # finished job, return LRMS ID!
     }
 
     return $jid; # line to ignore?
@@ -1195,8 +1178,7 @@
 sub getLrmsEventTime {
     if ($_[0] eq "pbs") {
 	return &getLrmsEventTime_pbs($_[1], $_[2]);
-    }
-    elsif ($_[0] eq "lsf") {
+  } elsif ($_[0] eq "lsf") {
 	return &getLrmsEventTime_lsf($_[1], $_[2]);
     }
     return 0;
@@ -1206,14 +1188,17 @@
     # Format in PBS log: 03/10/2006 00:03:33;E; ...
 
     my $eventTimestamp = 0;
+  my $lrmsRecordFields = shift;
+
+  return $eventTimestamp unless scalar(@$lrmsRecordFields) > 1;
 
-    my @ARRAY = split(";" , $_[0] );
+  my @ARRAY = split(";" , join(" ", $$lrmsRecordFields[0], $$lrmsRecordFields[1]));
     if (scalar(@ARRAY) > 0) {
 	my $sec = 0; my $min = 0; my $hour = 0;
 	my $mday = 0; my $mon = 0; my $year = 0;
 
 	if ($ARRAY[0] =~
-	    /^(\d{2})\/(\d{2})\/(\d{4})\s(\d{2}):(\d{2}):(\d{2})$/) {
+        /^(\d{2})\/(\d{2})\/(\d{4})\s(\d{2}):(\d{2}):(\d{2})$/o) {
 
 	    $mon = int($1)-1; # has to be 0 to 11 -> -1 !
 	    $mday = int($2);
@@ -1235,12 +1220,12 @@
     # Format in LSF log: "JOB_FINISH" "6.0" 1140194675 ...
 
     my $eventTimestamp = 0;
+  my $lrmsRecordFields = shift;
 
-    my @ARRAY = split(" " , $_[0] );
-    if ( (scalar(@ARRAY) > 2) && ($ARRAY[2] =~ /^(\d*)$/) ) {
+  if ( (scalar(@$lrmsRecordFields) > 2) && ($$lrmsRecordFields[2] =~ /^(\d*)$/o) ) {
 	$eventTimestamp = int($1);
 
-	$_[1] = $ARRAY[2];
+    $_[1] = $$lrmsRecordFields[2];
     }
 
     return $eventTimestamp;
@@ -1251,8 +1236,7 @@
 sub getLrmsJobCTime {
     if ($_[0] eq "pbs") {
 	return &getLrmsJobCTime_pbs($_[1]);
-    }
-    elsif ($_[0] eq "lsf") {
+  } elsif ($_[0] eq "lsf") {
 	return &getLrmsJobCTime_lsf($_[1]);
     }
     return 0;
@@ -1260,9 +1244,13 @@
 
 sub getLrmsJobCTime_pbs {
     my $ctime = 0;
+  my $lrmsRecordFields = shift;
 
-    if ($_[0] =~ /\sctime=(\d*)\s/) {
-	$ctime = int($1);
+  # Not sure if it's in the same field for all PBS-style LRMS systems,
+  # so map all (there should only be one)
+  my @ctime_matches = map { m&^ctime=(\d*)$&o?$1:() } @$lrmsRecordFields;
+  if (scalar @ctime_matches > 0) {
+    $ctime = int($ctime_matches[0]);
     }
 
     return $ctime;
@@ -1270,139 +1258,129 @@
 
 sub getLrmsJobCTime_lsf {
     my $ctime = 0;
+  my $lrmsRecordFields = shift;
 
     # in lsb.acct the creation time is the submitTime, the 8th field
-    my @ARRAY = split(" " , $_[0] );
-    if ( (scalar(@ARRAY) > 7) && ($ARRAY[7] =~ /^(\d*)$/) ) {
+
+  if ( (scalar(@$lrmsRecordFields) > 7) && ($$lrmsRecordFields[7] =~ /^(\d*)$/o) ) {
 	$ctime = int($1);
     }
 
     return $ctime;
 }
 
+sub parseUR_pbs {
+  my $lrmsRecordFields = shift;
 
-
-
-sub parseUR_pbs
-{
-	my $URString = $_[0];
-	print "".localtime().": Got UR string:\n$URString\n";
-
-	my @URArray = split ( ' ' , $URString );
-	my @tmpArray = split ( ';', $URArray[1] );
+	my @tmpArray = split ( ';', $$lrmsRecordFields[1] );
 	$_ = $tmpArray[3];
-	if (/^user=(.*)$/){$urAcctlogInfo{user}=$1;};
+	if (/^user=(.*)$/o) {
+    $urAcctlogInfo{user}=$1;
+  }
 	$urAcctlogInfo{lrmsId}=$tmpArray[2];
 	$_ = $tmpArray[2];
-	if (/^(\d*)\.(.*)$/){$urAcctlogInfo{server}=$2;};
-	foreach ( @URArray )
-	{
-		if ( /^queue=(.*)$/){$urAcctlogInfo{queue}=$1;};
-		if ( /^resources_used.cput=(.*)$/)
-		{
-			$_=$1;
-			$_=~ /(\d\d):(\d\d):(\d\d)$/;
+	if (/^(\d*)\.(.*)$/o) {
+    $urAcctlogInfo{server}=$2;
+  }
+	foreach my $record_field ( @$lrmsRecordFields ) {
+		if ( $record_field =~ /^queue=(.*)$/o) {
+      $urAcctlogInfo{queue}=$1;
+      next;
+    }
+		if ( $record_field =~ /^resources_used.cput=.*?(\d\d):(\d\d):(\d\d)$/o) {
 			$urAcctlogInfo{cput}= $3 + $2*60 + $1*3600;
+      next;
 		}
-		if ( /^resources_used.walltime=(.*)$/)
-		{
-			$_=$1;
-			$_=~ /(\d\d):(\d\d):(\d\d)$/;
+		if ( $record_field =~ /^resources_used.walltime=*?(\d\d):(\d\d):(\d\d)$/o) {
 			$urAcctlogInfo{walltime}= $3 + $2*60 + $1*3600;
+      next;
 		}
-		if ( /^resources_used.vmem=(.*)$/)
-		{
-			$_=$1;
-                        $_=~ /(\d*[M.k]b)$/;
+		if ( $record_field =~ /^resources_used.vmem=.*?(\d*[M.k]b)$/o) {
 			$urAcctlogInfo{vmem}     = $1;
+      next;
 		}
-		if ( /^resources_used.mem=(.*)$/)
-		{
-			$_=$1;
-			$_=~ /(\d*[M.k]b)$/;
+		if ( $record_field =~ /^resources_used.mem=.*?(\d*[M.k]b)$/o) {
 			$urAcctlogInfo{mem}     = $1;
+      next;
 		}
-		if ( /^Resource_List.neednodes=(\d*)$/)
-		{	
+		if ( $record_field =~ /^Resource_List.neednodes=(\d*)$/o) {	
 			$urAcctlogInfo{processors} = $1;
 			# attention! might also be list of hostnames,
 			# in this case the number of hosts should be
 			# counted!? What about SMP machines; is their
 			# hostname listed N times or only once??
-		} elsif ( /^Resource_List.nodect=(\d*)/ )
-		{
+      next;
+		} elsif ( $record_field =~ /^Resource_List.nodect=(\d*)/o ) {
 			$urAcctlogInfo{processors} = $1;
+      next;
 		} else {
 			$urAcctlogInfo{processors} = 1;
 		}
-		if ( /^group=(.*)$/)
-		{	
+		if ( $record_field =~ /^group=(.*)$/o) {	
 			$urAcctlogInfo{group} = $1;
+      next;
 		}
-		if ( /^jobname=(.*)$/)
-		{	
+		if ( $record_field =~ /^jobname=(.*)$/o) {	
 			$urAcctlogInfo{jobName} = $1;
+      next;
 		}
-		if ( /^ctime=(\d*)$/)
-		{	
+		if ( $record_field =~ /^ctime=(\d*)$/o) {	
 			$urAcctlogInfo{ctime} = $1;
+      next;
 		}
-		if ( /^qtime=(\d*)$/)
-		{	
+		if ( $record_field =~ /^qtime=(\d*)$/o) {	
 			$urAcctlogInfo{qtime} = $1;
+      next;
 		}
-		if ( /^etime=(\d*)$/)
-		{	
+		if ( $record_field =~ /^etime=(\d*)$/o) {	
 			$urAcctlogInfo{etime} = $1;
+      next;
 		}
-		if ( /^start=(\d*)$/)
-		{	
+		if ( $record_field =~ /^start=(\d*)$/o) {	
 			$urAcctlogInfo{start} = $1;
+      next;
 		}
-		if ( /^end=(\d*)$/)
-		{	
+		if ( $record_field =~ /^end=(\d*)$/o) {	
 			$urAcctlogInfo{end} = $1;
+      next;
 		}
-		if ( /^exec_host=(.*)$/)
-		{	
+		if ( $record_field =~ /^exec_host=(.*)$/o) {	
 			$urAcctlogInfo{execHost} = $1;
+      next;
 		}
-		if ( /^Exit_status=(\d*)$/)
-		{	
+		if ( $record_field =~ /^Exit_status=(\d*)$/) {	
 			$urAcctlogInfo{exitStatus} = $1;
+      next;
 		}
 	}
 	
 }
 
-sub parseUR_lsf
-{
-        my $URString = $_[0];
-	print "".localtime()."Got UR string:\n$URString\n";
+sub parseUR_lsf {
+  my $lrmsJobRecordFields = shift;
 
-        my @new = quotewords(" ", 0, $URString);
-        my $shift1 = $new[22];
-        my $shift2 = $new[23+$shift1];
-	$urAcctlogInfo{server}=$new[16].".".$domainName;
-        $urAcctlogInfo{queue}=$new[12];
-        $urAcctlogInfo{user}=$new[11];
-        $urAcctlogInfo{lrmsId}=$new[3];
-        $urAcctlogInfo{processors}=$new[6];
-        if ($new[10]) {
-	    $urAcctlogInfo{walltime}=$new[2]-$new[10];
-	    $urAcctlogInfo{cput}=int($new[28+$shift2])+int($new[29+$shift2]);
+  my $shift1 = $$lrmsJobRecordFields[22];
+  my $shift2 = $$lrmsJobRecordFields[23+$shift1];
+	$urAcctlogInfo{server}=$$lrmsJobRecordFields[16].".".$domainName;
+  $urAcctlogInfo{queue}=$$lrmsJobRecordFields[12];
+  $urAcctlogInfo{user}=$$lrmsJobRecordFields[11];
+  $urAcctlogInfo{lrmsId}=$$lrmsJobRecordFields[3];
+  $urAcctlogInfo{processors}=$$lrmsJobRecordFields[6];
+  if ($$lrmsJobRecordFields[10]) {
+    $urAcctlogInfo{walltime}=$$lrmsJobRecordFields[2]-$$lrmsJobRecordFields[10];
+    $urAcctlogInfo{cput}=int($$lrmsJobRecordFields[28+$shift2])+int($$lrmsJobRecordFields[29+$shift2]);
 	} else {
 	    $urAcctlogInfo{walltime}=0;
 	    $urAcctlogInfo{cput}=0;
 	}
 	$urAcctlogInfo{cput} = 0 if ($urAcctlogInfo{cput} < 0);
-        $urAcctlogInfo{mem}=$new[54+$shift2]."k";
-        $urAcctlogInfo{vmem}=$new[55+$shift2]."k";
-        $urAcctlogInfo{start}=$new[10];
-        $urAcctlogInfo{end}=$new[2];
-        $urAcctlogInfo{ctime}=$new[7];
-        $urAcctlogInfo{jobName}=$new[26+$shift2];
-        $urAcctlogInfo{exitStatus}=$new[49+$shift2];
+  $urAcctlogInfo{mem}=$$lrmsJobRecordFields[54+$shift2]."k";
+  $urAcctlogInfo{vmem}=$$lrmsJobRecordFields[55+$shift2]."k";
+  $urAcctlogInfo{start}=$$lrmsJobRecordFields[10];
+  $urAcctlogInfo{end}=$$lrmsJobRecordFields[2];
+  $urAcctlogInfo{ctime}=$$lrmsJobRecordFields[7];
+  $urAcctlogInfo{jobName}=$$lrmsJobRecordFields[26+$shift2];
+  $urAcctlogInfo{exitStatus}=$$lrmsJobRecordFields[49+$shift2];
 }
 
 
@@ -1418,14 +1396,14 @@
 
     if (scalar(@fqanParts) > 1 && $fqanParts[1] ne "")
     {
-	if ($fqanParts[1] =~ /^VO=(.*)$/)
+	if ($fqanParts[1] =~ /^VO=(.*)$/o)
 	{
 	    $fqanParts[1] = $1;
 	}
 	$_[2] = $fqanParts[1];
 	$retVal = 0;
     }
-    elsif ($uid =~ /^(.*)sgm$/ || $uid =~ /^(.*)prd$/ || $uid =~ /^(.*)\d{3}$/)
+    elsif ($uid =~ /^(.*)sgm$/o || $uid =~ /^(.*)prd$/o || $uid =~ /^(.*)\d{3}$/o)
     {
 	$_[2] = $1;
 	$retVal = 0;	
@@ -1451,7 +1429,7 @@
     if ($tzStr eq "+0000" || $tzStr eq "Z") {
 	$tzStr = "Z";
     }
-    elsif ($tzStr =~ /^(\+|-)\d{4}/) {
+    elsif ($tzStr =~ /^(\+|-)\d{4}/o) {
 	my $hourDiff;
 	my $minDiff;
 
@@ -1459,7 +1437,7 @@
 	$minDiff = int(substr($tzStr,3,2));
 
 #	if ($hourDiff < 0) { <- this is wrong since it misses e.g. -0030 !
-	if ($tzStr =~ /^-/) {
+	if ($tzStr =~ /^-/o) {
 	    # negative time zone, consider minutes negative as well!
 	    $minDiff = $minDiff * (-1);
 	}
@@ -1555,7 +1533,7 @@
 
     my $timePeriodString = "P";
 
-    if ($tSecs =~ /^\d*$/) {
+    if ($tSecs =~ /^\d*$/o) {
 
 	my $remainingSecs = $tSecs;
 	my $days = int($tSecs/86400);
@@ -1587,3 +1565,81 @@
 
     return $timePeriodString;
 }
+
+sub populate_lrmsRecordFields {
+  my ($lrmsType, $line) = @_;
+  chomp $line;
+  my @lrmsRecordFields = ();       # Reset
+  if ($lrmsType eq "pbs") {
+    # Simple, match previous behavior
+    @lrmsRecordFields = split(" ", $line);
+  } else {
+    #     print "$line\n";
+    my ($last_char, $token_buffer, $open_quote) = ("", "", 0);
+    my @line_chars = split //, $line;
+    my ($char, $error, $complete_token);
+    while (scalar @line_chars) {
+      $char = shift @line_chars;
+      $token_buffer="${token_buffer}${char}";
+      if ($char eq '"') {
+        if ($line_chars[0] and $line_chars[0] eq '"') {
+          # Next character is a quote: swallow it
+          $char = shift @line_chars;
+          $token_buffer="${token_buffer}${char}";
+          unless ($open_quote) {
+            $complete_token = 1; # Finished
+          }
+        } elsif ($open_quote) { # Close a quote
+          $open_quote = 0;
+          # Finished string: push to @lrmsRecordFields
+          $complete_token = 1;  # Finished
+          # Expect a space or EOI
+          if ($line_chars[0] and $line_chars[0] ne ' ') {
+            $error = "Non-space character following field-closing quote: $line_chars[0]";
+            last;
+          }
+        } else {                # Open a quote
+          ++$open_quote;
+        }
+      } elsif ((not $open_quote) and $char eq ' ') {
+        # Finished number or this is a simple delimiter: remove space
+        chop $token_buffer;
+        # If there's something left, it's a field.
+        if (length($token_buffer)) {
+          $complete_token = 1;  # Finished
+        }
+      }
+      if ($complete_token) {
+        # Empty string: push to @lrmsRecordFields
+        if ($token_buffer =~ /^((?:[^-\+\"\.\d]|[-\+\.\d]+[^-\+\.\d]).*)$/o) {
+          # Unquoted non-numeric
+          $error = "Unquoted non-numeric field: $1";
+          last;                 # exit
+        }
+        # Remove surrounding quotes if present
+        $token_buffer =~ s&^"(.*)"$&$1&o;
+        push @lrmsRecordFields, $token_buffer;
+        $token_buffer = "";
+        undef $complete_token;
+      }
+    }
+    if (not $error) {
+      # Check for global problems
+      if ($open_quote) {
+        $error = "Open quote at end of line";
+      } elsif (not scalar @lrmsRecordFields) {
+        $error = "Empty input line";
+      } elsif (grep /^"JOB_FINISH"$/o, @lrmsRecordFields[1 .. (@lrmsRecordFields - 1)]) {
+        $error = "Two lines concatenated";
+      }
+    }
+    if ($error) {
+      # Error
+      print scalar(localtime()), ": ERROR: $error\n";
+      print scalar(localtime()), ": Unable to parse received line: fields as follows - ",
+        join(", ", map { "*$_*" } @lrmsRecordFields), "\n";;
+      @lrmsRecordFields = ();
+    }
+  }
+  return \@lrmsRecordFields;
+}
