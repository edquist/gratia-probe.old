#!/usr/bin/python

import gratia.common.GratiaWrapper as GratiaWrapper
import gratia.common.GratiaCore as GratiaCore
import gratia.common.Gratia as Gratia

import gratia.gridftp_transfer.GratiaConnector as GratiaConnector
import gratia.gridftp_transfer.GftpLogParserCorrelator as GftpLogParserCorrelator
import gratia.gridftp_transfer.FileDigest as FileDigest
import gratia.gridftp_transfer.GridftpToGratiaEventTransformer as GridftpToGratiaEventTransformer
import gratia.gridftp_transfer.Logger as Logger
from gratia.gridftp_transfer.ContextTransaction import ContextTransaction

import optparse
import random
import time
import sys
import os

class Config(Gratia.ProbeConfiguration):

      def __init__(self, customConfig="ProbeConfig"):
          Gratia.ProbeConfiguration.__init__(self, customConfig=customConfig)

      def __getattr__(self,name):
          return self.getConfigAttribute(name)

class Context(GftpLogParserCorrelator.Context):
      def __init__(self):
          GftpLogParserCorrelator.Context.__init__(self)
          self._digest = 0
          self._lastUpdateTime = 0

      def getFileDigest(self):
          return self._digest

      def getLastUpdateTime(self):
          return self._lastUpdateTime

      def setLastUpdateTime(self,ut):
          self._lastUpdateTime = ut

      def setFileDigest(self,d):
          self._digest = d

class ProbeDriver:
   
      def __init__(self,cfg,gconnector):
         self.logger = Logger.getLogger('ProbeDriver')

         self.gconnector = gconnector 
         self.gridftplogFilePath = cfg.GridftpLogDir +"/"+"gridftp.log"
         self.gridftpAuthlogFilePath = cfg.GridftpLogDir +"/"+"gridftp-auth.log"

         self.gridftplogFile = file(self.gridftplogFilePath)
         self.gridftpAuthlogFile = file(self.gridftpAuthlogFilePath)
       
         self.txn = ContextTransaction(cfg.WorkingFolder+"/GridftpAccountingProbeState")

         self.context = self.txn.context()

         fdigest =  FileDigest.getFileDigest(self.gridftplogFilePath)
         if ( self.context == None ):
            self.context = Context()

         if ( fdigest != self.context.getFileDigest() ): # new file , reset context
               self.logger.warn("gridftp.log file has been replaced, resetting log context")
               self.context = Context()
               self.context.setFileDigest(fdigest)

         self.updateTimeDiff = time.time() - self.context.getLastUpdateTime()
         self.context.setLastUpdateTime(time.time())

         self.parser = GftpLogParserCorrelator.GftpLogParserCorrelatorCtx(self.gridftplogFile,self.gridftpAuthlogFile,self.context)
         self.eventTransformer = GridftpToGratiaEventTransformer.GridftpToGratiaEventTransformer()

      def close(self):
         self.gridftpAuthlogFile.close()
         self.gridftplogFile.close()

      def loop(self):

          for ftpEvent in self.parser: 
          
              currentRunningTime = time.time() - self.context.getLastUpdateTime()

              if ( currentRunningTime  > 20*60 or currentRunningTime > ( self.updateTimeDiff - 10 ) ):
                  break

              self.txn.createPending(self.context)


              try:
                 gEvent = self.eventTransformer.transform(ftpEvent)
              except Exception,ex:
                 self.logger.error("Could not transform ftpEvent:"+str(ftpEvent)+",ex:"+str(ex))
                 self.txn.commit()
                 continue

              try:
                 self.gconnector.send(gEvent)
              except GratiaConnector.TransientFailure,ex:
                 self.logger.error("Transient failure sending the event:"+str(gEvent)+",ex:"+str(ex))
                 time.sleep(15)
              self.txn.commit() 
              time.sleep(0.1)

def parse_opts():

    parser = optparse.OptionParser(usage="%prog [options]")
    parser.add_option("-f", "--gratia_config", help="Location of the Gratia config; "
        "defaults to /etc/gratia/gridftp-transfer/ProbeConfig.", dest="gratia_config",
        default="/etc/gratia/gridftp-transfer/ProbeConfig")
    parser.add_option("-s", "--sleep", help="Do a random amount of sleep, up to the"
        " specified number of seconds before running.", dest="sleep",
        default=0, type="int")
    parser.add_option("-v", "--verbose", help="Enable verbose logging to stdout.",
        default=False, action="store_true", dest="verbose")

    opts, args = parser.parse_args()

    # Initialize Gratia
    if not opts.gratia_config or not os.path.exists(opts.gratia_config):
        raise Exception("Gratia config, %s, does not exist." % opts.gratia_config)
    GratiaCore.Initialize(opts.gratia_config)

    if opts.verbose:
        GratiaCore.Config.__DebugLevel = 5

    return opts, args

def main():
   logger = Logger.createLogger()

   try:
      opts, dirs = parse_opts()
   except Exception, e:
      print >> sys.stderr, str(e)
      sys.exit(1)

   cfg = Config(opts.gratia_config)

   # Sanity checks for the probe's runtime environment.
   GratiaWrapper.CheckPreconditions()

   if opts.sleep:
      rnd = random.randint(1, int(opts.sleep))
      GratiaCore.DebugPrint(2, "Sleeping for %d seconds before proceeding." % rnd)
      time.sleep(rnd)

   # Make sure we have an exclusive lock for this probe.
   GratiaWrapper.ExclusiveLock()
  
   Logger.configureLogger(logger,cfg)

   rev =  Gratia.ExtractSvnRevision("$Revision$")
   conn = GratiaConnector.GratiaConnector(("gridftp","2.0"),
                                          ("GridftpTransferProbeDriver.py",
                                           str(rev)))

   logger = Logger.getLogger("main")
   logger.debug("Starting log file scan cycle")
   probDriver = ProbeDriver(cfg,conn)
   probDriver.loop()
   probDriver.close()
   logger.debug("Log file scan is done")

if __name__ == "__main__":
   main()

